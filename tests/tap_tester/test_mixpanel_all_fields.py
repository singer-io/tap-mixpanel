from tap_tester import runner, connections, menagerie

from base import TestMixPanelBase


class MixPanelAllFieldsTest(TestMixPanelBase):

    @staticmethod
    def name():
        return "tap_tester_mixpanel_all_fields_test"

    def all_fields_test(self):
        """
        All Fields Test.

        • Verify that when all fields are selected more than the automatic fields are replicated.
        • Verify no unexpected streams were replicated
        • Verify that more than just the automatic fields are replicated for each stream.
        • Verify all fields for each stream are replicated
        • Verify that the automatic fields are sent to the target
        """

        # Only following below 2 streams support pagination
        expected_streams = self.expected_streams()

        expected_automatic_fields = self.expected_automatic_fields()
        conn_id = connections.ensure_connection(self)

        found_catalogs = self.run_and_verify_check_mode(conn_id)

        # Table and field selection
        test_catalogs_all_fields = [
            catalog
            for catalog in found_catalogs
            if catalog.get("tap_stream_id") in expected_streams
        ]

        self.perform_and_verify_table_and_field_selection(
            conn_id, test_catalogs_all_fields
        )

        # Grab metadata after performing table-and-field selection to set expectations
        # used for asserting all fields are replicated
        stream_to_all_catalog_fields = dict()
        for catalog in test_catalogs_all_fields:
            stream_id, stream_name = catalog["stream_id"], catalog["stream_name"]
            catalog_entry = menagerie.get_annotated_schema(conn_id, stream_id)
            fields_from_field_level_md = [
                md_entry["breadcrumb"][1]
                for md_entry in catalog_entry["metadata"]
                if md_entry["breadcrumb"] != []
            ]
            stream_to_all_catalog_fields[stream_name] = set(fields_from_field_level_md)

        self.run_and_verify_sync(conn_id)

        actual_fields_by_stream = runner.examine_target_output_for_fields()

        synced_records = runner.get_records_from_target_output()

        # Verify no unexpected streams were replicated
        synced_stream_names = set(synced_records.keys())
        self.assertSetEqual(expected_streams, synced_stream_names)

        # All Fields Test
        for stream in expected_streams:
            with self.subTest(logging="Primary Functional Test", stream=stream):

                # Expected values
                expected_all_keys = stream_to_all_catalog_fields[stream]
                expected_automatic_keys = expected_automatic_fields.get(stream, set())

                # Collect actual values
                messages = synced_records.get(stream)
                actual_all_keys = set()
                for message in messages["messages"]:
                    if message["action"] == "upsert":
                        actual_all_keys.update(set(message["data"].keys()))

                # Verify that the automatic fields are sent to the target
                self.assertTrue(
                    actual_fields_by_stream.get(stream, set()).issuperset(
                        expected_automatic_keys
                    ),
                    msg="The fields sent to the target don't include all automatic fields",
                )

                # Verify that more than just the automatic fields are replicated for each stream.
                # 'cohort_members' has just 2 key and both are automatic
                if stream != "cohort_members":
                    self.assertGreater(
                        len(expected_all_keys), len(expected_automatic_keys)
                    )

                self.assertTrue(
                    expected_automatic_keys.issubset(expected_all_keys),
                    msg=f'{expected_automatic_keys-expected_all_keys} is not in "expected_all_keys"',
                )

                # As we can't find the below fields in the docs and also
                # it won't be generated by mixpanel APIs now so expected.
                if stream == "export":
                    expected_all_keys = expected_all_keys - {
                        "labels",
                        "sampling_factor",
                        "dataset",
                        "mp_reserved_duration_s",
                        "mp_reserved_origin_end",
                        "mp_reserved_origin_start",
                        "mp_reserved_event_count",
                    }

                # Verify all fields for each stream are replicated.
                # Skip engage as it return records in random manner with dynamic fields.
                if not stream == "engage":
                    self.assertSetEqual(expected_all_keys, actual_all_keys)

    def test_run(self):
        # Pagination test for standard server
        self.eu_residency = False
        self.all_fields_test()

        # Pagination test for EU residency server
        self.eu_residency = True
        self.all_fields_test()
