import tap_tester.connections as connections
import tap_tester.runner as runner
import tap_tester.menagerie as menagerie

from base import TestMixPanelBase


class MixPanelAllFieldsTest(TestMixPanelBase):
    def name(self):
        return "mix_panel_all_fields_test"

    def all_fields_test_run(self):
        """
        • and that when all fields are selected more than the automatic fields are replicated.
        • Verify no unexpected streams were replicated
        • Verify that more than just the automatic fields are replicated for each stream.
        • verify all fields for each stream are replicated
        • verify that the automatic fields are sent to the target
        """
        streams_to_test = self.expected_streams()

        expected_automatic_fields = self.expected_automatic_fields()

        conn_id = connections.ensure_connection(self)

        found_catalogs = self.run_and_verify_check_mode(conn_id)

        # table and field selection
        test_catalogs_all_fields = [catalog for catalog in found_catalogs
                                    if catalog.get('tap_stream_id') in streams_to_test]

        self.perform_and_verify_table_and_field_selection(
            conn_id, test_catalogs_all_fields)

        # grab metadata after performing table-and-field selection to set expectations
        # used for asserting all fields are replicated
        stream_to_all_catalog_fields = dict()
        for catalog in test_catalogs_all_fields:
            stream_id, stream_name = catalog['stream_id'], catalog['stream_name']
            catalog_entry = menagerie.get_annotated_schema(conn_id, stream_id)
            fields_from_field_level_md = [md_entry['breadcrumb'][1]
                                          for md_entry in catalog_entry['metadata']
                                          if md_entry['breadcrumb'] != []]
            stream_to_all_catalog_fields[stream_name] = set(
                fields_from_field_level_md)

        record_count_by_stream = self.run_and_verify_sync(conn_id)

        actual_fields_by_stream = runner.examine_target_output_for_fields()

        synced_records = runner.get_records_from_target_output()

        # Verify no unexpected streams were replicated
        synced_stream_names = set(synced_records.keys())
        self.assertSetEqual(streams_to_test, synced_stream_names)

        for stream in streams_to_test:
            with self.subTest(logging="Primary Functional Test", stream=stream):

                # expected values
                expected_primary_keys = self.expected_pks()[stream]
                expected_all_keys = stream_to_all_catalog_fields[stream]
                expected_automatic_keys = expected_automatic_fields.get(
                    stream, set())

                # collect actual values
                messages = synced_records.get(stream)
                actual_all_keys = set()
                for message in messages['messages']:
                    if message['action'] == 'upsert']:
                        actual_all_keys.update(set(message['data'].keys()))

                # verify that the automatic fields are sent to the target
                self.assertTrue(
                    actual_fields_by_stream.get(stream, set()).issuperset(
                        expected_automatic_keys),
                    msg="The fields sent to the target don't include all automatic fields")

                # Verify that more than just the automatic fields are replicated for each stream.
                if stream != "cohort_members":  # cohort_member has just 2 key and both are automatic
                    self.assertGreater(len(expected_all_keys),
                                       len(expected_automatic_keys))

                self.assertTrue(expected_automatic_keys.issubset(
                    expected_all_keys), msg=f'{expected_automatic_keys-expected_all_keys} is not in "expected_all_keys"')

                # As we can't find the below fields in the docs and also
                # it won't be generated by mixpanel APIs now so expected.
                if stream == "export":
                    expected_all_keys = expected_all_keys - {'labels', 'sampling_factor', 'dataset', 'mp_reserved_duration_s', 'mp_reserved_origin_end',
                                                             'mp_reserved_origin_start', 'mp_reserved_event_count'}

                # verify all fields for each stream are replicated
                if not stream == "engage": #Skip engage as it return records in random manner with dynamic fields.
                    self.assertSetEqual(expected_all_keys, actual_all_keys)


    def test_run(self):
        # All Fields test for standard server
        self.eu_residency = False
        self.all_fields_test_run()

        # All Fields test for EU recidency server
        self.eu_residency = True
        self.all_fields_test_run()
